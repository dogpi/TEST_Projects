#include <iostream>
#include <map>
#include <string>
using namespace std;

// 抽象类
class Shoes {
public:
	virtual ~Shoes() {}
	virtual void Show() = 0;
};
class Clothe
{
public:
	virtual void Show() = 0;
	virtual ~Clothe() {}
};

// 具体类
class NiKeShoes :public Shoes
{
public:
	void Show() {
		std::cout << "NiKe Shoes" << std::endl;
	}
};
class NiKeClothe :public Clothe
{
public:
	void Show() {
		std::cout << "NiKe Clothe" << std::endl;
	}
};

class AdidasShoes :public Shoes
{
public:
	void Show()
	{
		std::cout << "Adidas Shoes" << std::endl;
	}
};
class AdidasClothe :public Clothe
{
public:
	void Show()
	{
		std::cout << "Adidas Clothe" << std::endl;
	}
};

class LiNingShoes :public Shoes
{
public:
	void Show()
	{
		std::cout << "LiNing Shoes" << std::endl;
	}
};
class LiNingClothe :public Clothe
{
public:
	void Show()
	{
		std::cout << "LiNing Clothe" << std::endl;
	}
};

template <class ProductType_t>
class IProductRegistrar
{
public:
	virtual ProductType_t *CreateProduct() = 0;
protected:
	IProductRegistrar() {}
	virtual ~IProductRegistrar() {}
private:
	IProductRegistrar(const IProductRegistrar &);
	const IProductRegistrar &operator=(const IProductRegistrar &);
};

template <class ProductType_t>
class ProductFactory
{
public:
	// 获取工厂单例，工厂的实例是唯一的
	static ProductFactory<ProductType_t> &Instance()
	{
		static ProductFactory<ProductType_t> instance;
		return instance;
	}

	// 产品注册
	void RegisterProduct(IProductRegistrar<ProductType_t> *registrar, std::string name)
	{
		m_ProductRegistry[name] = registrar;
	}

	// 根据名字name，获取对应具体的产品对象
	ProductType_t *GetProduct(std::string name)
	{
		// 从map找到已经注册过的产品，并返回产品对象
		if (m_ProductRegistry.find(name) != m_ProductRegistry.end())
		{
			return m_ProductRegistry[name]->CreateProduct();
		}

		// 未注册的产品，则报错未找到
		std::cout<< "No product found for " << name << std::endl;

		return NULL;
	}
private:
	// 禁止外部构造和虚构
	ProductFactory() {}
	~ProductFactory() {}

	// 禁止外部拷贝和赋值操作
	ProductFactory(const ProductFactory &);
	const ProductFactory &operator=(const ProductFactory &);

	// 保存注册过的产品，key:产品名字 , value:产品类型
	std::map<std::string, IProductRegistrar<ProductType_t> *> m_ProductRegistry;
};

// 产品注册模板类，用于创建具体产品和从工厂里注册产品
// 模板参数 ProductType_t 表示的类是产品抽象类（基类），ProductImpl_t 表示的类是具体产品（产品种类的子类）
template <class ProductType_t, class ProductImpl_t>
class ProductRegistrar : public IProductRegistrar<ProductType_t>
{
public:
	// 构造函数，用于注册产品到工厂，只能显示调用
	explicit ProductRegistrar(std::string name)
	{
		// 通过工厂单例把产品注册到工厂
		ProductFactory<ProductType_t>::Instance().RegisterProduct(this, name);
	}

	// 创建具体产品对象指针
	ProductType_t *CreateProduct()
	{
		return new ProductImpl_t();
	}
};

int main()
{
	// 注册产品种类为Shoes（基类），产品为NiKe（子类）到工厂，产品名为nike
	ProductRegistrar<Shoes, NiKeShoes> nikeShoes("nike");

	Shoes* pNiKeShoes = ProductFactory<Shoes>::Instance().GetProduct("nike");
	pNiKeShoes->Show();

	ProductRegistrar<Clothe,AdidasClothe > adidasClothe("adidas");
	Clothe* pAdidasClothe = ProductFactory<Clothe>::Instance().GetProduct("adidas");
	pAdidasClothe->Show();

	delete pNiKeShoes;
	pNiKeShoes = nullptr;
	delete pAdidasClothe;
	pAdidasClothe = nullptr;

	system("pause");
	return 0;
}